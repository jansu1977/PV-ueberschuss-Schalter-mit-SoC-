blueprint:
  name: "PV Überschuss‑Schalter mit SoC (mit Vorzeichen‑Option & Verzögerung)"
  description: >
    Schaltet einen beliebigen Schalter **EIN**, wenn **beide** Bedingungen erfüllt sind

      • PV‑Überschuss ≥ Mindest‑Überschuss **für eine definierbare Zeit** (Hysterese)
      • Batterie‑SoC   ≥ Mindest‑SoC

    *Bleibt* **EIN**, solange der SoC oberhalb der Schwelle liegt – unabhängig davon,
    ob der PV‑Überschuss zwischenzeitlich zurückgeht.  
    Erst wenn der SoC **unter** den Schwellenwert fällt, wird AUS geschaltet.

    **Inputs (alle in der UI einstellbar)**
      * Ziel‑Schalter (`switch.*`)
      * PV‑Überschuss‑Sensor (W)
      * **Vorzeichen umkehren?** (falls dein Sensor bei Einspeisung **negativ** wird)
      * Batterie‑SoC‑Sensor (%)
      * Mindest‑SoC‑Schwelle (0‑100 %)
      * Mindest‑Überschuss (−20 000 … +20 000 W)
      * **Überschuss‑Verzögerung** (0‑600 s) → so lange muss der Überschuss anliegen, bevor eingeschaltet wird

  domain: automation

  input:
    target_switch:
      name: Ziel‑Schalter
      selector:
        entity:
          filter:
            domain: switch
    surplus_sensor:
      name: PV‑Überschuss‑Sensor (W)
      selector:
        entity:
          domain: sensor
    invert_surplus:
      name: Vorzeichen des Überschuss‑Sensors umkehren?
      default: false
      selector:
        boolean: {}
    battery_soc_sensor:
      name: Batterie‑SoC‑Sensor (%)
      selector:
        entity:
          domain: sensor
    min_soc:
      name: Mindest‑SoC (%)
      default: 50
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
    min_surplus:
      name: Mindest‑Überschuss (W)
      default: 500
      selector:
        number:
          min: -20000
          max: 20000
          step: 50
          unit_of_measurement: "W"
          mode: slider
    surplus_delay:
      name: Überschuss‑Verzögerung (s)
      default: 0
      selector:
        number:
          min: 0
          max: 600
          step: 5
          unit_of_measurement: "s"
          mode: slider

trigger:
  - platform: state
    entity_id: !input surplus_sensor
  - platform: state
    entity_id: !input battery_soc_sensor

action:
  - variables:
      pv_raw: "{{ states('!input surplus_sensor') | float(0) }}"
      pv_adj: "{{ pv_raw * (-1 if !input invert_surplus else 1) }}"
  - choose:
      # -------- EINschalten --------
      - conditions:
          - condition: numeric_state
            entity_id: !input battery_soc_sensor
            above: !input min_soc
          - condition: numeric_state
            entity_id: !input surplus_sensor
            above: !input min_surplus
            for:
              seconds: !input surplus_delay
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input target_switch
      # -------- AUSschalten --------
      - conditions:
          - condition: numeric_state
            entity_id: !input battery_soc_sensor
            below: !input min_soc
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input target_switch
    default: []

mode: restart
