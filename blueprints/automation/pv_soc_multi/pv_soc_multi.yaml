blueprint:
  name: "PV Überschuss-Schalter mit SoC (v5-final)"
  description: >
    Steuert mehrere Shelly-Steckdosen oder andere Switches nach PV-Überschuss
    und Batterie-SoC. Enthält Verzögerungs-Logik, Prioritäten, Netz-Import-Limit
    sowie optionale Benachrichtigungen.

  domain: automation

  input:
    target_switches:
      name: Schalter-Liste (Priorität)
      description: |
        Wähle eine oder mehrere Switch-Entitäten aus.
        Die Reihenfolge im Dropdown bestimmt die Schalt-Priorität.
      selector:
        entity:
          domain: switch
          multiple: true

    step_power:
      name: Schalt-Leistung je Stufe (W)
      description: |
        Zusätzlicher PV-Überschuss, der für jede weitere Steckdose benötigt wird.
        Beispiel: 500 W = zweite Steckdose schaltet erst bei PV ≥ 1000 W, dritte ≥ 1500 W.
      default: 500
      selector:
        number:
          min: 0
          max: 5000
          step: 50
          unit_of_measurement: "W"

    surplus_sensor:
      name: PV-Überschuss-Sensor (W)
      description: |
        Sensor, der den aktuellen PV-Überschuss (positiv) / Netzbezug (negativ)
        in Watt angibt.
      selector:
        entity:
          domain: sensor

    min_surplus:
      name: Mindest-Überschuss (W)
      description: |
        Erst ab diesem Überschuss-Wert wird eingeschaltet.
      default: 500
      selector:
        number:
          min: -20000
          max: 20000
          step: 50
          unit_of_measurement: "W"

    surplus_delay:
      name: Überschuss-Verzögerung (s)
      description: |
        Wartezeit, die der Überschuss über der Schwelle verbleiben muss,
        bevor eingeschaltet wird.
      default: 60
      selector:
        number:
          min: 0
          max: 600
          step: 5
          unit_of_measurement: "s"

    battery_soc_sensor:
      name: Batterie-SoC-Sensor (%)
      description: |
        Sensor, der den aktuellen Ladezustand der Batterie in Prozent liefert.
      selector:
        entity:
          domain: sensor

    min_soc:
      name: Mindest-SoC (%)
      description: |
        Unter diesem Ladezustand schaltet die Automation alle Steckdosen aus.
      default: 50
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"

    off_delay:
      name: Aus-Verzögerung (s)
      description: |
        Verzögerung nach Unterschreiten des SoC-Schwellenwerts,
        bevor ausgeschaltet wird.
      default: 60
      selector:
        number:
          min: 0
          max: 600
          step: 5
          unit_of_measurement: "s"

    import_limit:
      name: Netz-Import-Limit (W)
      description: |
        Zuschalten nur, wenn der aktuelle Netzbezug unter diesem Wert liegt.
      default: 200
      selector:
        number:
          min: 0
          max: 5000
          step: 50
          unit_of_measurement: "W"

    notify_target:
      name: Notify-Dienst (optional)
      description: |
        Optionaler Push-Benachrichtigungsdienst, z.B. notify.mobile_app_xyz
      default: ""
      selector:
        text: {}

trigger:
  - platform: state
    entity_id:
      - !input surplus_sensor
      - !input battery_soc_sensor
    for:
      seconds: 5

variables:
  pv_now: "{{ states(!input surplus_sensor) | float(0) }}"
  soc_now: "{{ states(!input battery_soc_sensor) | float(0) }}"
  grid_imp: "{{ states('sensor.grid_import') | float(0) if states('sensor.grid_import') not in ['unknown','unavailable',''] else 0 }}"

action:
  - choose:
      # ---------- Einschalten ----------
      - conditions:
          - condition: template
            value_template: "{{ pv_now >= !input min_surplus }}"
            for:
              seconds: !input surplus_delay
          - condition: template
            value_template: "{{ soc_now >= !input min_soc }}"
          - condition: template
            value_template: "{{ grid_imp <= !input import_limit }}"
        sequence:
          - repeat:
              for_each: !input target_switches
              sequence:
                - variables:
                    idx: "{{ repeat.index0 }}"
                - condition: template
                  value_template: >
                    {{ pv_now >= (!input min_surplus) + (idx * !input step_power) }}
                - service: switch.turn_on
                  target:
                    entity_id: "{{ repeat.item }}"

      # ---------- Ausschalten ----------
      - conditions:
          - condition: template
            value_template: "{{ soc_now < !input min_soc }}"
            for:
              seconds: !input off_delay
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input target_switches

  # ---------- Benachrichtigung ----------
  - if:
      - "{{ !input notify_target != '' }}"
    then:
      - service: "{{ !input notify_target }}"
        data:
          message: >
            PV-Miner {{ 'AN' if pv_now >= !input min_surplus and soc_now >= !input min_soc else 'AUS' }}
            – PV: {{ pv_now|round }} W / SoC: {{ soc_now|round }} %.

mode: restart
