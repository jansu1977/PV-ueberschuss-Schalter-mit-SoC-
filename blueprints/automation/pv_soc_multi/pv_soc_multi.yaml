blueprint:
  name: PV Überschuss-Schalter mit SoC (v5.2)
  description: Steuert stufenweise mehrere Schalter basierend auf PV-Überschuss und Batterie-SoC. Konfigurierbare Schwellwerte, Verzögerungen, Prioritäten und Netzbezugslimit. Separater SoC-Schwellwert zum Ausschalten aller Geräte. Optionale Benachrichtigungen.
  domain: automation
  input:
    target_switches:
      name: Ziel-Schalter
      description: Liste der zu steuernden Schalter (Reihenfolge bestimmt Priorität).
      selector:
        entity:
          domain: switch
          multiple: true
    step_power:
      name: Leistungsschritt pro Schalter
      description: Leistung in Watt, die pro zusätzlichem Schalter an Überschuss benötigt wird (zusätzlich zum Mindest-Überschuss).
      default: 500
      selector:
        number:
          min: 50
          max: 2000
          step: 50
          unit_of_measurement: "W"
          mode: slider
    surplus_sensor:
      name: PV-Überschuss Sensor
      description: Sensor, der den aktuellen PV-Überschuss in Watt liefert (positiv = Überschuss).
      selector:
        entity:
          domain: sensor
          device_class: power
    min_surplus:
      name: Mindest-Überschuss zum Einschalten
      description: Schwellwert für PV-Überschuss (Watt), ab dem der erste Schalter eingeschaltet werden darf.
      default: 100
      selector:
        number:
          min: -5000
          max: 20000
          step: 10
          unit_of_measurement: "W"
          mode: box
    surplus_delay:
      name: Einschaltverzögerung für Überschuss
      description: Dauer in Sekunden, die der Überschuss über der jeweiligen Schwelle liegen muss, bevor geschaltet wird.
      default: 10
      selector:
        number:
          min: 0
          max: 3600
          step: 1
          unit_of_measurement: "s"
          mode: slider
    battery_soc_sensor:
      name: Batterie SoC Sensor
      description: Sensor, der den aktuellen Ladezustand der Batterie in Prozent liefert.
      selector:
        entity:
          domain: sensor
          device_class: battery
    min_soc:
      name: Mindest Batterie SoC zum Einschalten
      description: Minimaler Ladezustand der Batterie (%), damit eingeschaltet wird.
      default: 50
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
    off_soc_threshold:
      name: Ausschalt SoC Schwellwert (Alle Schalter AUS)
      description: Wenn der Batterie-SoC unter diesen Wert fällt, werden alle Schalter nach der Ausschaltverzögerung ausgeschaltet.
      default: 45
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
    off_delay:
      name: Ausschaltverzögerung nach SoC-Unterschreitung
      description: Dauer in Sekunden, die gewartet wird, nachdem der 'Ausschalt SoC Schwellwert' unterschritten wurde, bevor alle Schalter ausgeschaltet werden.
      default: 300
      selector:
        number:
          min: 0
          max: 3600
          step: 1
          unit_of_measurement: "s"
          mode: slider
    grid_import_sensor:
      name: Netzbezug Sensor
      description: Sensor, der den aktuellen Netzbezug in Watt anzeigt (positiv für Bezug, negativ für Einspeisung).
      selector:
        entity:
          domain: sensor
          device_class: power
    import_limit:
      name: Maximaler Netzbezug beim Einschalten
      description: Maximal erlaubter Netzbezug in Watt, während Geräte eingeschaltet werden.
      default: 50
      selector:
        number:
          min: 0
          max: 5000
          step: 10
          unit_of_measurement: "W"
          mode: box
    notify_target:
      name: Benachrichtigungsdienst (Optional)
      description: Dienst für Push-Benachrichtigungen (z.B. notify.mobile_app_telefonname). Leer lassen, um keine Benachrichtigungen zu senden.
      default: ""
      selector:
        text: {}

trigger:
  - platform: state
    entity_id: !input surplus_sensor
    id: surplus_changed
  - platform: state
    entity_id: !input battery_soc_sensor
    id: soc_changed
  - platform: state
    entity_id: !input grid_import_sensor
    id: grid_import_changed

variables:
  input_surplus_sensor_entity: !input surplus_sensor
  input_battery_soc_sensor_entity: !input battery_soc_sensor
  input_grid_import_sensor_entity: !input grid_import_sensor
  input_min_surplus: !input min_surplus
  input_min_soc: !input min_soc
  input_off_soc_threshold: !input off_soc_threshold
  input_step_power: !input step_power
  input_import_limit: !input import_limit
  input_target_switches: !input target_switches
  input_surplus_delay_sec: !input surplus_delay
  input_off_delay_sec: !input off_delay
  notify_service: !input notify_target
  current_surplus: "{{ states(input_surplus_sensor_entity) | float(0) }}"
  current_soc: "{{ states(input_battery_soc_sensor_entity) | float(0) }}"
  current_grid_import: "{{ states(input_grid_import_sensor_entity) | float(0) }}"

mode: restart

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ current_surplus >= input_min_surplus }}"
          - condition: template
            value_template: "{{ current_soc >= input_min_soc }}"
          - condition: template
            value_template: "{{ current_grid_import <= input_import_limit }}"
        sequence:
          - delay:
              seconds: "{{ input_surplus_delay_sec }}"
          - condition: template
            value_template: >-
              {{ states(input_surplus_sensor_entity) | float(0) >= input_min_surplus and
                 states(input_battery_soc_sensor_entity) | float(0) >= input_min_soc and
                 states(input_grid_import_sensor_entity) | float(0) <= input_import_limit }}
          - repeat:
              for_each: "{{ input_target_switches }}"
              sequence:
                - variables:
                    switch_index: "{{ repeat.index - 1 }}"
                    current_switch_entity_id: "{{ repeat.item }}"
                    required_surplus_for_this_switch: "{{ input_min_surplus + (switch_index * input_step_power) }}"
                - condition: template
                  value_template: >-
                    {{ states(input_surplus_sensor_entity) | float(0) >= required_surplus_for_this_switch and
                       is_state(current_switch_entity_id, 'off') }}
                - service: switch.turn_on
                  target:
                    entity_id: "{{ current_switch_entity_id }}"
                - if:
                    - condition: template
                      value_template: "{{ notify_service | length > 0 }}"
                  then:
                    - service: "{{ notify_service }}"
                      data:
                        message: "PV-Schalter EIN: {{ state_attr(current_switch_entity_id, 'friendly_name') | default(current_switch_entity_id) }} (Stufe {{ switch_index + 1 }}) - PV: {{ states(input_surplus_sensor_entity) | float(0) | round(0) }}W / SoC: {{ states(input_battery_soc_sensor_entity) | float(0) | round(0) }}%"

      - conditions:
          - condition: template
            value_template: "{{ current_soc < input_off_soc_threshold }}"
        sequence:
          - delay:
              seconds: "{{ input_off_delay_sec }}"
          - condition: template
            value_template: "{{ states(input_battery_soc_sensor_entity) | float(0) < input_off_soc_threshold }}"
          - service: switch.turn_off
            target:
              entity_id: "{{ input_target_switches }}"
          - if:
              - condition: template
                value_template: "{{ notify_service | length > 0 }}"
            then:
              - service: "{{ notify_service }}"
                data:
                  message: "PV-Schalter ALLE AUS - SoC: {{ states(input_battery_soc_sensor_entity) | float(0) | round(0) }}% (unter {{ input_off_soc_threshold }}%)"
