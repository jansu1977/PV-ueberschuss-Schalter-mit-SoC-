blueprint:
  name: PV Überschuss-Schalter mit SoC (v5.2)
  description: >-
    Schaltet mehrere Geräte intelligent basierend auf PV-Überschuss, Batterieladestand (SoC) und Prioritäten.
    Berücksichtigt individuelle Leistungsschwellen, SoC-Fenster pro Gerät, Netzbezugslimits
    und bietet eine flexible Interpretation des Überschuss-Sensors. (Struktur V7)
  domain: automation # Wichtig: Definiert, dass dieses Blueprint eine Automation erstellt
  input:
    # --- Hauptsensoren ---
    pv_power_entity:
      name: PV-Leistung Sensor (Gesamterzeugung)
      description: Sensor, der die aktuelle PV-Erzeugungsleistung liefert (z.B. sensor.solar_power).
      selector:
        entity:
          domain: sensor
          device_class: power
    house_consumption_entity:
      name: Hausverbrauch Sensor (Optional)
      description: Sensor, der den aktuellen Hausverbrauch misst. Wenn nicht angegeben, wird nur der direkte Überschusssensor oder PV-Leistung verwendet.
      selector:
        entity:
          domain: sensor
          device_class: power
      default: ""
    surplus_sensor:
      name: Direkter PV-Überschuss Sensor (Optional)
      description: >-
        Sensor, der den Netzeinspeisungs-Überschuss direkt anzeigt.
        Wenn angegeben, wird dieser bevorzugt. Sonst Berechnung aus PV-Leistung ./. Hausverbrauch.
        Die Interpretation (positiv/negativ) wird durch die folgende Checkbox gesteuert.
      selector:
        entity:
          domain: sensor
          device_class: power
      default: ""
    surplus_sensor_reports_negative_as_surplus:
      name: "Überschuss-Sensor meldet Einspeisung als negativen Wert"
      description: >-
        Aktivieren, wenn der 'Direkte PV-Überschuss Sensor' (oder der berechnete Überschuss)
        Einspeisung als negativen Wert ausgibt (z.B. Netzsensor: -500W = 500W Einspeisung).
        Wenn deaktiviert, wird ein positiver Wert als Überschuss erwartet.
      selector:
        boolean: {}
      default: false

    # --- Globale Überschuss-Schwellen (immer positiv konfigurieren!) ---
    min_surplus_to_activate_automation:
      name: Mindest-Gesamtüberschuss zum Aktivieren der Logik
      description: PV-Überschuss (positiver Wert in Watt), der mindestens vorhanden sein muss, damit die Automation überhaupt beginnt, Schalter zu prüfen.
      selector:
        number:
          min: 0
          max: 20000
          step: 10
          unit_of_measurement: "W"
      default: 100
    min_surplus_to_keep_on_watts:
      name: Mindest-Gesamtüberschuss zum Anlassen (Fallback)
      description: >-
        Unterschreitet der Gesamtüberschuss diesen Wert, werden Geräte (nach Verzögerung) abgeschaltet,
        es sei denn, sie haben eigene, strengere Ausschaltbedingungen. (Positiver Wert in Watt)
      selector:
        number:
          min: 0
          max: 10000
          step: 10
          unit_of_measurement: "W"
      default: 20

    # --- Batterie SoC ---
    battery_soc_entity:
      name: Batterie SoC Sensor
      description: Sensor, der den Ladezustand der Batterie in Prozent anzeigt.
      selector:
        entity:
          domain: sensor
          device_class: battery
    min_soc_to_activate_automation:
      name: Mindest Batterie-SoC zum Aktivieren der Logik
      description: SoC in %, den die Batterie mindestens haben muss, damit die Automation überhaupt beginnt, Schalter zu prüfen.
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 50
    global_off_soc_threshold:
      name: Globaler SoC-Abschaltwert für alle Geräte
      description: >-
        Unterschreitet der Batterie-SoC diesen Wert, werden alle gesteuerten Geräte
        (nach Verzögerung) abgeschaltet, unabhängig von ihren individuellen SoC-Fenstern.
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 30

    # --- Netzbezug & Batterielimits (Optional) ---
    grid_import_sensor:
      name: Netzbezug Sensor (Optional)
      description: Sensor, der den aktuellen Netzbezug misst (positiv = Bezug, negativ = Einspeisung).
      selector:
        entity:
          domain: sensor
          device_class: power
      default: ""
    max_grid_import_while_switching_on_watts:
      name: Max. erlaubter Netzbezug beim Zuschalten
      description: Verhindert das Einschalten von Geräten, wenn der aktuelle Netzbezug diesen Wert (in Watt) überschreitet.
      selector:
        number:
          min: 0
          max: 5000
          step: 10
          unit_of_measurement: "W"
      default: 50
    battery_discharge_power_sensor:
      name: Batterie-Entladeleistung Sensor (Optional)
      description: Sensor, der die aktuelle Entladeleistung der Batterie misst (positiv bei Entladung).
      selector:
        entity:
          domain: sensor
          device_class: power
      default: ""
    max_battery_discharge_power_watts:
      name: Max. erlaubte Batterie-Entladeleistung
      description: Verhindert das Einschalten von Geräten, wenn die Batterie bereits stark entladen wird.
      selector:
        number:
          min: 0
          max: 10000
          step: 100
          unit_of_measurement: "W"
      default: 3000

    # --- Ziel-Schalter Konfiguration ---
    target_switches:
      name: Ziel-Schalter und ihre Konfigurationen
      description: >-
        Liste der zu steuernden Schalter. Fügen Sie für jeden Schalter ein Objekt hinzu.
        Wichtig: Die Reihenfolge hier bestimmt NICHT die Priorität. Die Priorität wird pro Schalter festgelegt.
      selector:
        object: {}

    # --- Verzögerungen ---
    surplus_check_on_delay_seconds:
      name: Einschaltverzögerung für Überschussprüfung
      description: >-
        Sekunden, die der Überschuss stabil über der benötigten Schwelle liegen muss, bevor ein Gerät einschaltet.
      selector:
        number:
          min: 0
          max: 1800
          step: 1
          unit_of_measurement: "s"
      default: 60
    general_off_delay_seconds:
      name: Ausschaltverzögerung bei Wegfall des Überschusses
      description: >-
        Sekunden, die der Überschuss unter der benötigten Schwelle liegen muss, bevor ein Gerät abschaltet.
      selector:
        number:
          min: 0
          max: 1800
          step: 1
          unit_of_measurement: "s"
      default: 120
    soc_triggered_off_delay_seconds:
      name: Ausschaltverzögerung bei SoC-Grenzwertverletzung
      description: Sekunden Verzögerung, bevor Geräte aufgrund von SoC-Grenzwerten abgeschaltet werden.
      selector:
        number:
          min: 0
          max: 1800
          step: 1
          unit_of_measurement: "s"
      default: 300
  # Optional: source_url: https://gist.github.com/your_username/your_gist_id (oder Ihr GitHub Repo)

# Block 2: Definition der Automation, die dieses Blueprint erzeugt
# Diese Schlüssel stehen auf der obersten Ebene der YAML-Datei, als Geschwister zum `blueprint:`-Block.

trigger:
  - platform: time_pattern
    minutes: "/1"
  # Optional: Weitere Trigger, z.B. bei relevanten Sensoränderungen
  # - platform: state
  #   entity_id: !input battery_soc_entity
  # - platform: state
  #   entity_id: !input pv_power_entity # etc.

# Globale Bedingungen für die gesamte Automation (optional)
# condition: []

variables:
  # --- Sensorwerte einlesen und Blueprint Inputs verwenden ---
  pv_power_entity_in: !input pv_power_entity
  house_consumption_entity_in: !input house_consumption_entity
  surplus_sensor_in: !input surplus_sensor
  surplus_sensor_reports_negative_as_surplus_in: !input surplus_sensor_reports_negative_as_surplus
  battery_soc_entity_in: !input battery_soc_entity
  grid_import_sensor_in: !input grid_import_sensor
  battery_discharge_power_sensor_in: !input battery_discharge_power_sensor
  target_switches_in: !input target_switches

  # --- Sensorwerte als Zahlen ---
  pv_power: "{{ states(pv_power_entity_in) | float(0) }}"
  house_consumption: "{{ states(house_consumption_entity_in) | float(0) if house_consumption_entity_in != '' and house_consumption_entity_in != none else 0 }}"
  direct_surplus_raw: "{{ states(surplus_sensor_in) | float(0) if surplus_sensor_in != '' and surplus_sensor_in != none else 'unavailable' }}"
  battery_soc: "{{ states(battery_soc_entity_in) | float(0) }}"
  grid_import_raw: "{{ states(grid_import_sensor_in) | float(0) if grid_import_sensor_in != '' and grid_import_sensor_in != none else 0 }}"
  current_grid_import_watts: "{{ [0, grid_import_raw] | max if grid_import_sensor_in != '' and grid_import_sensor_in != none else 0 }}"
  current_battery_discharge_watts: "{{ states(battery_discharge_power_sensor_in) | float(0) if battery_discharge_power_sensor_in != '' and battery_discharge_power_sensor_in != none else 0 }}"

  # --- Effektiven Überschuss berechnen ---
  calculated_surplus_value: >-
    {% if direct_surplus_raw != 'unavailable' %}
      {{ direct_surplus_raw }}
    {% else %}
      {{ pv_power - house_consumption }}
    {% endif %}
  
  effective_surplus_power: >-
    {% set raw_val = calculated_surplus_value %}
    {% set negative_is_surplus_checkbox = surplus_sensor_reports_negative_as_surplus_in %}
    {% if negative_is_surplus_checkbox %}
      {% if raw_val < 0 %} {{ -1 * raw_val }}
      {% else %} 0 {% endif %}
    {% else %}
      {% if raw_val > 0 %} {{ raw_val }}
      {% else %} 0 {% endif %}
    {% endif %}

  # --- Globale Schwellenwerte aus Inputs ---
  min_surplus_global_on: !input min_surplus_to_activate_automation
  min_soc_global_on: !input min_soc_to_activate_automation
  min_surplus_global_keep_on: !input min_surplus_to_keep_on_watts
  global_soc_off: !input global_off_soc_threshold
  max_grid_import_allowed: !input max_grid_import_while_switching_on_watts
  max_battery_discharge_allowed: !input max_battery_discharge_power_watts

  # --- Delays aus Inputs ---
  on_delay: !input surplus_check_on_delay_seconds
  off_delay_surplus: !input general_off_delay_seconds
  off_delay_soc: !input soc_triggered_off_delay_seconds
  
  # --- Ziel-Schalter sortiert nach Priorität ---
  sorted_target_switches: "{{ (target_switches_in if target_switches_in is iterable else []) | sort(attribute='priority') }}"

mode: restart

action:
  # 1. Globale Vorabprüfungen: Ist genug SoC und Überschuss überhaupt vorhanden?
  - condition: template
    value_template: "{{ battery_soc >= min_soc_global_on }}"
  - condition: template
    value_template: "{{ effective_surplus_power >= min_surplus_global_on }}"

  # --- Hauptlogik: Schalter durchgehen und EIN/AUS schalten ---
  - choose:
      # Fall: Es gibt konfigurierte Schalter
      - conditions:
          - condition: template
            value_template: "{{ sorted_target_switches | count > 0 }}"
        sequence:
          # Variable für den dynamisch verfügbaren Überschuss
          - variables:
              remaining_surplus_for_switching: "{{ effective_surplus_power }}" # Startwert ist der globale effektive Überschuss
          
          # Schleife durch die sortierten Schalter
          - repeat:
              for_each: "{{ sorted_target_switches }}"
              sequence:
                - variables: # Variablen lokal für diesen Schleifendurchlauf
                    switch_item: "{{ repeat.item }}"
                    switch_entity_id: "{{ switch_item.entity_id }}"
                    switch_is_on: "{{ is_state(switch_entity_id, 'on') }}"
                    power_needed: "{{ switch_item.power_requirement_watts | float(0) }}"
                    # priority: "{{ switch_item.priority | int(99) }}" # Nicht mehr direkt hier gebraucht, da Liste sortiert ist
                    min_on_soc_switch: "{{ switch_item.min_on_soc | float(min_soc_global_on) }}"
                    max_on_soc_switch: "{{ switch_item.max_on_soc | float(101) }}"
                    switch_off_delay_surplus: "{{ switch_item.individual_off_delay_seconds | int(off_delay_surplus) }}"

                # --- Logik zum EINSCHALTEN ---
                - choose:
                    - conditions:
                        - "{{ not switch_is_on }}"
                        - "{{ remaining_surplus_for_switching >= power_needed }}"
                        - "{{ battery_soc >= min_on_soc_switch }}"
                        - "{{ battery_soc < max_on_soc_switch }}"
                        - "{{ current_grid_import_watts <= max_grid_import_allowed if grid_import_sensor_in != '' and grid_import_sensor_in != none else true }}"
                        - "{{ current_battery_discharge_watts <= max_battery_discharge_allowed if battery_discharge_power_sensor_in != '' and battery_discharge_power_sensor_in != none else true }}"
                      sequence:
                        # Hier könnte die Einschaltverzögerung (on_delay) implementiert werden,
                        # z.B. mit einem "wait_for_trigger" mit Timeout, das prüft, ob die Bedingungen für die Dauer von 'on_delay' anhalten.
                        # Vereinfacht: direktes Einschalten
                        - service: switch.turn_on
                          target:
                            entity_id: "{{ switch_entity_id }}"
                        # "Verbrauche" den Überschuss für diesen Schalter im Kontext dieser Automationsausführung
                        - variables:
                            remaining_surplus_for_switching: "{{ remaining_surplus_for_switching - power_needed }}"
                  # default: [] # Kein Default für Einschalten

                # --- Logik zum AUSSCHALTEN ---
                - choose:
                    - conditions:
                        - "{{ switch_is_on }}" # Nur prüfen, wenn Schalter AN ist
                        - condition: or # Mindestens einer der folgenden Gründe muss zutreffen
                          conditions:
                            - "{{ battery_soc < global_soc_off }}"
                            - "{{ battery_soc < min_on_soc_switch or battery_soc >= max_on_soc_switch }}"
                            - "{{ effective_surplus_power < (power_needed if switch_item.strict_power_off_threshold | default(false) else min_surplus_global_keep_on) }}"
                      sequence:
                        # Hier müsste die Ausschaltverzögerungslogik implementiert werden (siehe Kommentar im vorherigen Blueprint).
                        # Vereinfacht: direktes Ausschalten
                        - service: switch.turn_off
                          target:
                            entity_id: "{{ switch_entity_id }}"
                  # default: [] # Kein Default für Ausschalten
    # default: [] # Kein Default für das Haupt-Choose

